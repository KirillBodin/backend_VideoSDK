import dotenv from "dotenv";
import express from "express";
import cors from "cors";
import jwt from "jsonwebtoken";
import cookieParser from "cookie-parser";
import { initDB, User, ClassMeeting } from "./models/index.js";
import authRoutes from "./routes/authRoutes.js";
import schoolAdminRoutes from "./routes/schoolAdminRoutes.js";
import verifyFirebaseToken from "./middlewares/authMiddleware.js";


dotenv.config();
const CLIENT_URL = process.env.CLIENT_URL || "http://localhost:3000";

const app = express();
app.use(cookieParser()); // ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies
app.use(cors({ origin: CLIENT_URL, credentials: true })); 

app.use(
  cors({
    origin: "https://meet.tamamat.com", // ‚úÖ –¢–≤–æ–π —Ñ—Ä–æ–Ω—Ç
    credentials: true, // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∫—É–∫–∏
  })
);


// üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS (—á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)
app.use(
  cors({
      origin: CLIENT_URL,
      methods: "GET,POST,PUT,DELETE",
      allowedHeaders: "Content-Type,Authorization",
      credentials: true,
  })
);

app.use(express.json());
app.use(cookieParser());

// üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use("/api/auth", authRoutes);
app.use("/api/school-admins", schoolAdminRoutes);


// ‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get("/api/protected", verifyFirebaseToken, (req, res) => {
  res.json({ success: true, message: "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!", user: req.user });
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.get("/api/:adminId/teachers", async (req, res) => {
  try {
    const { adminId } = req.params;

    const admin = await User.findByPk(adminId);
    if (!admin || admin.role !== "admin") {
      return res.status(403).json({ error: "Admin not found or no permission" });
    }

    const teachers = await User.findAll({
      where: { schoolId: admin.schoolId, role: "teacher" },
      attributes: ["id", "name", "email"],
    });

    res.json(teachers);
  } catch (error) {
    console.error("‚ùå Error fetching teachers:", error);
    res.status(500).json({ error: "Server error" });
  }
});


// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è –≤ —à–∫–æ–ª—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.post("/api/:adminId/teachers", async (req, res) => {
  try {
    const { adminId } = req.params;
    const { email, name, password } = req.body;

    if (!email || !name || !password) {
      return res.status(400).json({ error: "All fields are required" });
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const admin = await User.findByPk(adminId);
    if (!admin || admin.role !== "admin") {
      return res.status(403).json({ error: "Admin not found or no permission" });
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–¥–º–∏–Ω –∫ —à–∫–æ–ª–µ
    const schoolId = admin.schoolId;
    if (!schoolId) {
      return res.status(404).json({ error: "Admin is not assigned to a school" });
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingTeacher = await User.findOne({ where: { email } });
    if (existingTeacher) {
      return res.status(409).json({ error: "Teacher with this email already exists" });
    }

    // ‚úÖ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ —à–∫–æ–ª–µ, —á—Ç–æ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const newTeacher = await User.create({
      email,
      password, // –í –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º!
      name,
      role: "teacher",
      schoolId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —É—á–∏—Ç–µ–ª—è –∫ —à–∫–æ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    });

    res.status(201).json({
      message: "‚úÖ Teacher added successfully!",
      teacher: newTeacher,
    });
  } catch (error) {
    console.error("‚ùå Error adding teacher:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.get("/api/:userId/lessons", async (req, res) => {
  try {
    const { userId } = req.params;

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–∞–∫ –∏ —É—á–∏—Ç–µ–ª—å)
    const user = await User.findByPk(userId);
    console.log("[DEBUG] User found:", user);

    if (!user) {
      console.log(`[DEBUG] ‚ùå User with ID ${userId} not found in DB`);
      return res.status(404).json({ error: "User not found" });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –µ–≥–æ —à–∫–æ–ª—ã
    if (user.role === "admin") {
      if (!user.schoolId) {
        return res.status(400).json({ error: "Admin is not assigned to a school" });
      }

      // üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π —ç—Ç–æ–π —à–∫–æ–ª—ã
      const teachers = await User.findAll({
        where: { schoolId: user.schoolId, role: "teacher" },
        attributes: ["id"], // –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ ID —É—á–∏—Ç–µ–ª–µ–π
      });

      console.log("[DEBUG] Teachers found:", teachers.length);

      if (teachers.length === 0) {
        return res.json({ message: "No teachers found for this school" });
      }

      const teacherIds = teachers.map((teacher) => teacher.id);

      // üîç –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–∏–º —É—á–∏—Ç–µ–ª—è–º
      const lessons = await ClassMeeting.findAll({
        where: { teacherId: teacherIds },
        include: {
          model: User,
          attributes: ["name", "email"],
        },
        attributes: ["id", "className", "meetingId", "teacherId"],
      });

      console.log("[DEBUG] –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:", lessons.length);

      if (lessons.length === 0) {
        return res.json({ message: "No lessons found for this school" });
      }

      return res.json(lessons);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —É—á–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —É—Ä–æ–∫–∏
    if (user.role === "teacher") {
      const lessons = await ClassMeeting.findAll({
        where: { teacherId: user.id },
        attributes: ["id", "className", "meetingId"],
      });

      console.log("[DEBUG] –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:", lessons.length);

      if (lessons.length === 0) {
        return res.json({ message: "No lessons found for this teacher" });
      }

      return res.json(lessons);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–µ —É—á–∏—Ç–µ–ª—å
    return res.status(403).json({ error: "No permission" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


app.get("/api/:adminId/lessons", async (req, res) => {
  try {
    const { adminId } = req.params;

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const admin = await User.findByPk(adminId);
    console.log("[DEBUG] –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:", admin);

    if (!admin) {
      console.log(`[DEBUG] ‚ùå –ê–¥–º–∏–Ω —Å ID ${adminId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
      return res.status(404).json({ error: "Admin not found" });
    }

    if (admin.role !== "admin") {
      console.log(`[DEBUG] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${adminId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
      return res.status(403).json({ error: "No permission" });
    }

    if (!admin.schoolId) {
      console.log(`[DEBUG] ‚ùå –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${adminId} –Ω–µ—Ç schoolId`);
      return res.status(400).json({ error: "Admin is not assigned to a school" });
    }

    // üîç –ü–æ–ª—É—á–∞–µ–º ID —É—á–∏—Ç–µ–ª–µ–π —ç—Ç–æ–π —à–∫–æ–ª—ã
    const teachers = await User.findAll({
      where: { schoolId: admin.schoolId, role: "teacher" },
      attributes: ["id"], // –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ ID —É—á–∏—Ç–µ–ª–µ–π
    });

    console.log("[DEBUG] –ù–∞–π–¥–µ–Ω–æ —É—á–∏—Ç–µ–ª–µ–π:", teachers.length);

    if (teachers.length === 0) {
      return res.json({ message: "No teachers found for this school" });
    }

    const teacherIds = teachers.map((teacher) => teacher.id);

    // üîç –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–∏–º —É—á–∏—Ç–µ–ª—è–º
    const lessons = await ClassMeeting.findAll({
      where: { teacherId: teacherIds },
      include: {
        model: User,
        attributes: ["name", "email"],
      },
      attributes: ["id", "className", "meetingId", "teacherId"],
    });

    console.log("[DEBUG] –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:", lessons.length);

    if (lessons.length === 0) {
      return res.json({ message: "No lessons found for this school" });
    }

    res.json(lessons);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –µ–≥–æ —É—Ä–æ–∫–æ–≤
app.delete("/api/:adminId/teachers/:teacherId", async (req, res) => {
  try {
    const { adminId, teacherId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const admin = await User.findByPk(adminId);
    if (!admin || admin.role !== "admin") {
      return res.status(403).json({ error: "Admin not found or no permission" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–∏—Ç–µ–ª—å –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω —Ç–æ–π –∂–µ —à–∫–æ–ª–µ, —á—Ç–æ –∏ –∞–¥–º–∏–Ω
    const teacher = await User.findOne({
      where: { id: teacherId, schoolId: admin.schoolId, role: "teacher" },
    });

    if (!teacher) {
      return res.status(404).json({ error: "Teacher not found in this school" });
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ —É—á–∏—Ç–µ–ª—è
    const deletedLessons = await ClassMeeting.destroy({ where: { teacherId } });

    console.log(`[DEBUG] ‚ùå –£–¥–∞–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${deletedLessons} —É —É—á–∏—Ç–µ–ª—è ${teacherId}`);

    // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —É—á–∏—Ç–µ–ª—è
    await teacher.destroy();

    res.json({ message: `‚úÖ Teacher (ID: ${teacherId}) and all their lessons deleted successfully` });
  } catch (error) {
    console.error("‚ùå Error deleting teacher and lessons:", error);
    res.status(500).json({ error: "Server error" });
  }
});


// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞
app.get("/api/get-meeting/:className", async (req, res) => {
  try {
    const { className } = req.params;
    const meeting = await ClassMeeting.findOne({ where: { className } });

    if (!meeting) {
      return res.status(404).json({ error: "Meeting not found" });
    }

    res.json(meeting);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:", error);
    res.status(500).json({ error: "Server error" });
  }
});

// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ Video SDK
app.get("/api/get-token", (req, res) => {
  try {
    const API_KEY = "90400612-174b-4704-ad94-0cf6297984d8";
    const SECRET_KEY = "b91e87d50f5f3687eaea9fb13e634a999179d9d18a3fef4dadc21c3efaf2bd44"

    if (!API_KEY || !SECRET_KEY) {
      return res.status(500).json({ error: "Missing VideoSDK API keys" });
    }

    const token = jwt.sign(
      {
        apikey: API_KEY,
        permissions: ["allow_join", "allow_mod", "allow_create", "allow_publish", "allow_subscribe"]
      },
      SECRET_KEY,
      { expiresIn: "1h" }
    );
    

    res.json({ token });
  } catch (error) {
    console.error("[server] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    res.status(500).json({ error: "Failed to generate token" });
  }
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ
app.get("/api/get-meeting/:className", async (req, res) => {
  try {
    const { className } = req.params;
    const meeting = await ClassMeeting.findOne({ where: { className } });

    if (!meeting) {
      return res.status(404).json({ error: "Meeting not found" });
    }

    res.json(meeting);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:", error);
    res.status(500).json({ error: "Server error" });
  }
});

// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
app.post("/api/save-meeting", async (req, res) => {
  try {
    const { className, meetingId, teacherEmail } = req.body;

    if (!className || !meetingId || !teacherEmail) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–∏—Ç–µ–ª—å
    const teacher = await User.findOne({ where: { email: teacherEmail } });
    if (!teacher) {
      return res.status(404).json({ error: "Teacher not found" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingMeeting = await ClassMeeting.findOne({ where: { className } });

    if (existingMeeting) {
      existingMeeting.meetingId = meetingId;
      await existingMeeting.save();
      return res.json({ message: "‚úÖ Meeting updated", meeting: existingMeeting });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
    const newMeeting = await ClassMeeting.create({
      className,
      meetingId,
      teacherId: teacher.id,
    });

    res.status(201).json({ message: "‚úÖ New meeting saved", meeting: newMeeting });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:", error);
    res.status(500).json({ error: "Server error" });
  }
});




// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, async () => {
  await initDB();
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});


