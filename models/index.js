const sequelize = require("./db"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Sequelize
const User = require("./User");
const School = require("./School");
const ClassMeeting = require("./ClassMeeting"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

// üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
User.belongsTo(School, { foreignKey: "schoolId", onDelete: "CASCADE" });
School.hasMany(User, { foreignKey: "schoolId" });

ClassMeeting.belongsTo(User, { foreignKey: "teacherId", onDelete: "CASCADE" }); // –£—Ä–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É—á–∏—Ç–µ–ª—é
User.hasMany(ClassMeeting, { foreignKey: "teacherId" }); // –£—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ —É—Ä–æ–∫–æ–≤

const initDB = async () => {
  try {
    await sequelize.authenticate();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!");

    await sequelize.sync({ alter: true }); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error);
  }
};

module.exports = { sequelize, initDB, User, School, ClassMeeting };
